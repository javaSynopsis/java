Установка:
	0. Сборка проекта:
		maven - лучше
		ant
	1. Выбрать сервер:
		Сервер приложений (дополнительные функции и технологии, часто веб-интерфейс управления сервером)
		Контейнер сервлетов (меньше готовых библиотек, нет JSP)
		Spring Boot со встроенным сервером
	1.1 Установить саму базу данных и СУБД: MySQL, MariaDB, PostegerSQL
	2. Установить фреймворк для веб приложения
		Spring, Spring MVC, Spring Security, Spring Data JPA
	3. Установить фреймворк для тестов:
		JUnit
		Mock
	4. Установить библиотеку-коннектор для базы данных
		JDBC Connector
	5. Установить фреймворк ORM для связи с базой
		Hibernate ORM
	6. Установить Bean Validation API, если надо проверять данные из JSP
		Hibernate Validator
	7. Установить дополнительные наборы тегов для .jsp страниц
		JSTL - стандартный набор тегов подключить в .jsp
		Spring Tags - дополнительные чуть более удобные теги
		Spring Security - теги для ограничения прав на куски страниц (подключить)
		Thymeleaf - удобный (лаконичный) набор тегов
	8. К библиотеке ORM подключить подходящий пулл соединений и настроить его
	9. К библиотеке ORM подключить подходящий кэш (не тип кэша, а его реализацию)
		(это только для кэша L2 и запросов?)
	10. Возможно установить Central Authentication Service (CAS) (сервер-прослойка для одной регестрации на все части сайт: лента, чат, форум). По сути это filter для запросов к сервлетам.
		Если варианты серверов с интеграция со Spring
		SSO (Single Sign On, Технология единого входа) - собственно это и есть этот единый вход.
	
	11. Если REST с js через AJAX (и без JSP вообще), то установить restjs или другое
	12. Чтобы обрабатывать запросы от сервера и рисовать в restjs установить flux
	13. Установить jQuery для удобное работы
	
	14. Использовать очередь JMS сообщений, если нужно обрабатывать много сообщений с гарантированной доставкой. Часто сервера имеют свои средства для них, в том числе веб-интерфейсы для настройки и управления.
	15. Использовать MBean для управления и просмотра конфигов
	16. Использовать библиотеки или фреймворки для интеграции с соц. сетями.
	17. Использовать библиотеки или фреймворки для интеграции
		В том числе OAuth - протокол для интеграции функций сервисов с моим сайтом.
		
Разработка:
	1. Спроектировать базу
	2. Создать главный класс-инициализатор WebMvcConfigurerAdapter (источник бинов)
		2. Импортировать через @Import другие класс-конфигурации, если нужно
		2. Отметить гланый класс конфигов:
			@EnableWebMvc - для включения MVC
			@Configuration - для отметки, что это источник бинов (конфиг)
			@EnableTransactionManagement - для включения управления транзакциями
			@ComponentScan({ "com.crm.*" }) - отметить источник бинов???
		2. Задать в конфиге InternalResourceViewResolver для управления типом отображения jsp и установить ему путь к jsp страницам
		2. Переопределить метод addResourceHandlers() установив в нём в объект ResourceHandlerRegistry пути к статическим ресурсам (css, js)
	2. Настроить ORM (в классе инициализаторе):
		2. Создать бин объект-источник данных о базе и установить в настройки ORM: BasicDataSource (или другой)
		2. Создать бин с настройками ORM: LocalSessionFactoryBuilder (вложить в него BasicDataSource)
		2. Создать бин SessionFactory и установить ему все настройки ORM (вложить в него LocalSessionFactoryBuilder)
		2. Создать бин объект-менеджер транзакций и вложить ему SessionFactory. Этот бин автоматически используется для методов аннотированных @Transactional
		2. Установить в SessionFactory имя пакета в котором будет model (dto) - классы @Entity
	2. Наделать сущностей базы и связать их в ORM
		Создать класс предка с общими свойствами
		Использовать разные аннотации для уменьшения размера кода и базы
	2. Создать DAO для каждой @Entity и наследовать ему класс из Spring Data JPA для частично-готовой реализацией. Отметить его @Repository. Дополнить нужными методами DAO. Внутри DAO для выполнения запросов использовать @Autowired SessionFactory.
	Можно делать @Transactional в DAO???
	2. Создать слой сервисов отметив их @Service при этом транзакции @Transactional делать внутри них.
		Ограничить если надо некоторые методы сервисов доступ @Secured("role")
	