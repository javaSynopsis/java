hibernate (расширенная реализация JPA)

Библиотека прослойка для БД. Унифицирует запросы к БД

1. Конфиги
2. Маппинг (xml, annotation)
3. Транзакции
4. ORM
5. Запросы (sql, hql, criteria)
	ОБЫЧНО всегда используют criteria

src/main/resources/hibernate.cfg.xml
	- стандартный файл конфигураций (адрес БД, пользователь, пароль)
src/main/java/HibernateUtil.java
	- класс делающий подгрузку конфигов (создаём бин-сервис и заполняем его конфигами)
		если не веб-приложение, то просто static объект из которого достаем сессию
	
0. Заполняем конфиги и создаем класс HibernateUtil который создайт SessionFactory бин
	//hibernate.cfg.xml
		...
		<hibernate-configuration>
			<session-factory>
				<property name="connection.driver_class">com.mysql.jdbc.Driver
				<property name="connection.url>jdbc:mysql://...
				<property name="connection.user">root
				<property name="connection.password">dwqdqwdf
				<property name="connection.show_sql">dwqdqwdf
				<property name="hbm2ddl.auto">create
												update
												validation
												
				<mapping resource="hibernate/user.cfg.xml" />
			</session-factory>
		</hibernate-configuration>
	
1. Описывает классы связанные с базой (маппинг)
src/main/java/user.cfg.xml
src/main/java/phone.cfg.xml
	- создать для каждой таблицы по файлы, тут описывается маппинг:
	
	1.1 Связываем юзера с классом. И устанавливаем связь с ролями
	<hibernate-mapping>
		<class name="com.pkg.User" table="user">
			<id name="id" column="id">
				<generator class="native" />
			</id>
			<property name="firstname" column="first_name" type="string"/>
			<property name="lastname" column="last_name" type="string"/>
			<property name="age" column="age" type="int"/>
			
			<many-to-one name="role" class="Role">
				<column name="role_id" not-null="true" />
			</many-to-one
		</class>
	</hibernate-mapping>
	
	1.2 Создаём роль
	//и класс должен содержать множество юзеров
	class Role {
		private Set<User> users;
	}
	
	1.3 Мапим к роль юзеров
	<hibernate-mapping>
		<class name="com.pkg.Role" table="role">
			<id name="id" column="id">
				<generator class="native" />
			</id>
			//...
			<set name="users" table="user" lazy="true">
				<key>
					<column name="role_id" no-null="true" />
				</key>
				<one-to-many class="entity.User" />
			</set>
		</class>
	</hibernate-mapping>
	
2. Создаём фабрику
	SessionFactory sessionFactory = HibernateUtil.getSessionFactory();

один-к-одному
	просто прописываем тэг <one-to-one с указанием классов С ОБЕИХ СТОРОН
	
многие-ко-многим
	1. с обеих сторон Set<E> mySet = new HashSet<>();
	
------
Специфичные атрибуты:
	1. inverse - 
<class name="Category">
    <id name="id" column="CATEGORY_ID"/>
    ...
    <bag name="items" table="CATEGORY_ITEM">
        <key column="CATEGORY_ID"/>
        <many-to-many class="Item" column="ITEM_ID"/>
    </bag>
</class>

<class name="Item">
    <id name="id" column="ITEM_ID"/>
    ...

    <!-- inverse end -->
    <bag name="categories" table="CATEGORY_ITEM" inverse="true">
        <key column="ITEM_ID"/>
        <many-to-many class="Category" column="CATEGORY_ID"/>
    </bag>
</class>
	2. fetch=JOIN и fetch=SELECT
	3. lazy=true
	4. cascade="save-update" и другие